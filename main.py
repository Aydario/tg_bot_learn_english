import random
import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
telegram_token = os.getenv('telegram_token')
database = os.getenv('database')
user = os.getenv('user')
password = os.getenv('password')

print('Start telegram bot...')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = TeleBot(telegram_token)
state_storage = StateMemoryStorage()


def show_hint(*lines: str) -> str:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.

    :param lines: –°—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.
    :return: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.
    """
    return '\n'.join(lines)


def show_translate(data: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ -> —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ".

    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–ª—é—á–∏ 'eng_word' –∏ 'rus_word'.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–ª–æ–≤–∞.
    """
    return f'{data["eng_word"]} -> {data["rus_word"]}'


def get_user_id(chat_id: int) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç user_id –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id —á–∞—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.

    :param chat_id: ID —á–∞—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    :return: user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    """
    conn = psycopg2.connect(database=database, user=user, password=password)
    cur = conn.cursor()
    cur.execute('SELECT user_id FROM users WHERE tg_chat_id = %s', (chat_id,))
    user_id = cur.fetchone()[0]
    cur.close()
    conn.close()
    return user_id


class Command:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    """
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    SHOW_WORDS = '–ò–∑—É—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞ üìù'


class MyStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞.
    """
    eng_word = State()
    rus_word = State()
    other_words = State()


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /cards –∏ /start.
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = psycopg2.connect(database=database, user=user, password=password)
    cur = conn.cursor()
    chat_id = message.chat.id

    cur.execute('SELECT user_id FROM users WHERE tg_chat_id = %s', (chat_id,))

    if not cur.fetchone():
        bot.send_message(chat_id, """–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å \
        –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
        
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ \
–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑—É—á–∞–µ–º—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–æ–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:

–ò–∑—É—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞ üìù        
–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.
–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è""")

        cur.execute('INSERT INTO users (tg_chat_id) VALUES (%s)', (chat_id,))
        conn.commit()

    cur.execute('SELECT user_id FROM users WHERE tg_chat_id = %s', (message.chat.id,))
    user_id = cur.fetchone()[0]
    cur.execute("""
        SELECT w.rus_word, w.eng_word
        FROM words w
        LEFT JOIN user_words uw ON w.word_id = uw.word_id
        WHERE uw.user_id IS NULL
                OR (uw.user_id = %s AND NOT uw.is_deleted)
                OR (uw.user_id != %s AND uw.is_deleted AND NOT EXISTS (
                    SELECT 1
                    FROM user_words uw2
                    WHERE uw2.word_id = w.word_id
                    AND uw2.user_id = %s
                    AND uw2.is_deleted
                ))
        ORDER BY RANDOM()
        LIMIT 1
    """, (user_id, user_id, user_id))
    rus_word, eng_word = cur.fetchone()

    cur.execute('SELECT user_id FROM users WHERE tg_chat_id = %s', (message.chat.id,))
    user_id = cur.fetchone()[0]
    cur.execute("""
        SELECT w.eng_word
        FROM words w
        LEFT JOIN user_words uw ON w.word_id = uw.word_id
        WHERE w.eng_word != %s
            AND (
                uw.user_id IS NULL
                OR (uw.user_id = %s AND NOT uw.is_deleted)
                OR (uw.user_id != %s AND uw.is_deleted AND NOT EXISTS (
                    SELECT 1
                    FROM user_words uw2
                    WHERE uw2.word_id = w.word_id
                    AND uw2.user_id = %s
                    AND uw2.is_deleted
                ))
            )
        ORDER BY RANDOM()
        LIMIT 3
    """, (eng_word, user_id, user_id, user_id))
    other_words = [row[0] for row in cur.fetchall()]

    cur.close()
    conn.close()

    markup = types.ReplyKeyboardMarkup(row_width=2)

    buttons = [types.KeyboardButton(eng_word)] + [types.KeyboardButton(word) for word in other_words]
    random.shuffle(buttons)
    buttons.extend([
        types.KeyboardButton(Command.SHOW_WORDS),
        types.KeyboardButton(Command.NEXT),
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD)
    ])
    markup.add(*buttons)

    greeting = f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {rus_word}'
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.eng_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['eng_word'] = eng_word
        data['rus_word'] = rus_word
        data['other_words'] = other_words


@bot.message_handler(func=lambda message: message.text == Command.SHOW_WORDS)
def show_words(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É SHOW_WORDS.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    conn = psycopg2.connect(database=database, user=user, password=password)
    cur = conn.cursor()

    try:
        user_id = get_user_id(chat_id)
        cur.execute("""
            SELECT w.eng_word
            FROM words w
            LEFT JOIN user_words uw ON w.word_id = uw.word_id
            WHERE uw.user_id IS NULL
                    OR (uw.user_id = %s AND NOT uw.is_deleted)
                    OR (uw.user_id != %s AND uw.is_deleted AND NOT EXISTS (
                        SELECT 1
                        FROM user_words uw2
                        WHERE uw2.word_id = w.word_id
                        AND uw2.user_id = %s
                        AND uw2.is_deleted
                    ))
        """, (user_id, user_id, user_id))
        words = [row[0] for row in cur.fetchall()]
        bot.send_message(chat_id, show_hint(*words))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤.")
    finally:
        cur.close()
        conn.close()


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É NEXT.
    –°–æ–∑–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É DELETE_WORD.
    –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ –∏–∑—É—á–∞–µ–º—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    conn = psycopg2.connect(database=database, user=user, password=password)
    cur = conn.cursor()

    try:
        with bot.retrieve_data(message.from_user.id, chat_id) as data:
            cur.execute('SELECT word_id FROM words WHERE eng_word = %s', (data['eng_word'],))
            word_id = cur.fetchone()[0]
            user_id = get_user_id(chat_id)
            cur.execute('INSERT INTO user_words (user_id, word_id, is_deleted) VALUES (%s, %s, TRUE)',
                        (user_id, word_id))
            conn.commit()
            bot.send_message(chat_id, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
    finally:
        cur.close()
        conn.close()


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É ADD_WORD.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–µ–ª–µ–Ω—ã–π Green"): ')
    bot.set_state(message.from_user.id, MyStates.rus_word, message.chat.id)


@bot.message_handler(state=MyStates.rus_word)
def add_word_process(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã ADD_WORD.
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ –∏–∑—É—á–∞–µ–º—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    conn = psycopg2.connect(database=database, user=user, password=password)
    cur = conn.cursor()

    try:
        rus_word, eng_word = message.text.split()
        cur.execute('INSERT INTO words (rus_word, eng_word) VALUES (%s, %s) RETURNING word_id', (rus_word, eng_word))
        word_id = cur.fetchone()[0]
        user_id = get_user_id(chat_id)
        cur.execute('INSERT INTO user_words (user_id, word_id) VALUES (%s, %s)', (user_id, word_id))
        conn.commit()
        bot.send_message(chat_id, '–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    except ValueError:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
    finally:
        cur.close()
        conn.close()
        bot.delete_state(message.from_user.id, chat_id)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = message.chat.id
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)

    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            eng_word = data['eng_word']
            if text == eng_word:
                hint = show_translate(data)
                hint_text = ['–û—Ç–ª–∏—á–Ω–æ!‚ù§', hint]
                buttons = [
                    types.KeyboardButton(Command.SHOW_WORDS),
                    types.KeyboardButton(Command.NEXT),
                    types.KeyboardButton(Command.ADD_WORD),
                    types.KeyboardButton(Command.DELETE_WORD)
                ]
                hint = show_hint(*hint_text)
            else:
                buttons = [types.KeyboardButton(word) for word in data['other_words']]
                buttons.append(types.KeyboardButton(eng_word))
                random.shuffle(buttons)
                buttons.extend([
                    types.KeyboardButton(Command.SHOW_WORDS),
                    types.KeyboardButton(Command.NEXT),
                    types.KeyboardButton(Command.ADD_WORD),
                    types.KeyboardButton(Command.DELETE_WORD)
                ])
                hint = show_hint('–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!', f'–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data["rus_word"]}')
        markup.add(*buttons)
        bot.send_message(chat_id, hint, reply_markup=markup)
    except KeyError:
        bot.send_message(chat_id, '–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /cards. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
